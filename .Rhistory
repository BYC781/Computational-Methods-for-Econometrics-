init <- c(1,1,1,1)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
View(fit)
init <- c(0,0.1,0.1,1)
init <- c(1,1,1,1)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
View(fit)
init <- c(0,0.1,0.1,1)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
View(fit)
init <- c(5,5,5,5)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
?pnorm
View(kable_styling)
knitr::opts_chunk$set(echo = TRUE)
library(haven)
library(tidyverse)
getwd()
g1 <- read.table("./ps3/problem_set_3_sample/group/group1.dat", header = TRUE)
View(g1)
g1 <- read.table("./ps3/problem_set_3_sample/group/group1.dat", header = FALSE)
View(g1)
g1 <- read.table("./ps3/problem_set_3_sample/group/group1.dat", header = TRUE)
g1 <- read.table("./ps3/problem_set_3_sample/group/group1.dat", header = FALSE)
setwd("/Users/bychen/Documents/ECON-7218/ps3/problem_set_3_sample/group/")
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("group", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("g", 1:76)
# 可以透過data_list$g1, data_list$g2, ..., data_list$g76來存取相應的變數
View(g1)
setwd("/Users/bychen/Documents/ECON-7218/ps3/problem_set_3_sample/group/")
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("group", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("g", 1:76)
# 可以透過data_list$g1, data_list$g2, ..., data_list$g76來存取相應的變數
attach(data_list)
View(data_list)
attach(data_list)
combined_data <- bind_rows(data_list, .id = "group")
View(combined_data)
combined_data <- bind_rows(data_list, .id = "group")
combined_data <- combined_data %>%
mutate(group = as.integer(substring(group, 2)))
View(combined_data)
col_names <- c('age', 'male', 'balck', 'asian', 'hisp', 'race.other',
'both.par', 'less.hs', 'more.hs', 'mom.edu.mis', 'welfare',
'mom.job.miss', 'prof', 'job.other', 'sport', 'white',
'yr.school', 'gpa', 'overage')
colnames(combined_data) <- col_names
setwd("/Users/bychen/Documents/ECON-7218/ps3/problem_set_3_sample/network/")
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("network", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("W", 1:76)
knitr::opts_chunk$set(echo = TRUE)
library(haven)
library(tidyverse)
setwd("/Users/bychen/Documents/ECON-7218/ps3")
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("./problem_set_3_sample/group", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("/Users/bychen/Documents/ECON-7218/ps3/problem_set_3_sample/group", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("./problem_set_3_sample/group/group", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("g", 1:76)
# 可以透過data_list$g1, data_list$g2, ..., data_list$g76來存取相應的變數
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("./problem_set_3_sample/network/network", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("W", 1:76)
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("./problem_set_3_sample/group/group", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("g", 1:76)
# 可以透過data_list$g1, data_list$g2, ..., data_list$g76來存取相應的變數
# 建立一個空的list，用於存放所有的變數
network_lsit <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("./problem_set_3_sample/network/network", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
network_lsit[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("W", 1:76)
View(network_lsit)
nrow(combined_data)
class(nrow(combined_data))
network_lsit[[1]]
identity(nrow(network_lsit[[1]]))
total <- sum(sapply(1:76, function(i) {
logdetterm <- log(det(identity(nrow(network_lsit[[i]])) - lambda * network_lsit[[i]]))
return(logdetterm)
}))
lambda <- 1
total <- sum(sapply(1:76, function(i) {
logdetterm <- log(det(identity(nrow(network_lsit[[i]])) - lambda * network_lsit[[i]]))
return(logdetterm)
}))
total <- sum(sapply(1:76, function(i) {
logdetterm <- log(det(identity(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
}))
total
total <- sum(sapply(1:76, function(i) {
logdetterm <- log(det(identity(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
}))
log(det(identity(nrow(network_lsit[[1]])) - lambda * as.matrix(network_lsit[[1]]))
)
identity(nrow(network_lsit[[1]])) - lambda * as.matrix(network_lsit[[1]])
identity(nrow(network_lsit[[1]])) - lambda * as.matrix(network_lsit[[1]])
identity(nrow(network_lsit[[1]]))
diag(nrow(network_lsit[[1]])))
diag(nrow(network_lsit[[1]]))
lambda * as.matrix(network_lsit[[i]]))
lambda * as.matrix(network_lsit[[i]])
log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
total <- sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
}))
total
i = 1
log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
for (i in 1:76){
print(i)
print(log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]]))))
}
det(diag(nrow(network_lsit[[6]]))
)
diag(nrow(network_lsit[[6]]))
lambda * as.matrix(network_lsit[[6]])
i = 6
diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]]))
log(-468)
lambda = 0.1
for (i in 1:76){
print(i)
print(log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]]))))
}
total <- sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
}))
total
lambda = 0.05
total <- sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
}))
total
col_names <- c('age', 'male', 'balck', 'asian', 'hisp', 'race.other',
'both.par', 'less.hs', 'more.hs', 'mom.edu.mis', 'welfare',
'mom.job.miss', 'prof', 'job.other', 'sport', 'white',
'yr.school', 'gpa', 'overage')
colnames(combined_data) <- col_names
View(combined_data)
col_names <- c('group','age', 'male', 'balck', 'asian', 'hisp', 'race.other',
'both.par', 'less.hs', 'more.hs', 'mom.edu.mis', 'welfare',
'mom.job.miss', 'prof', 'job.other', 'sport', 'white',
'yr.school', 'gpa', 'overage')
colnames(combined_data) <- col_names
View(data_list)
Y.g <- data_list[[i]][,18]
Y.g
S.g
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
S.g
e.g <- S.g %*% Y.g
e.g
X.g <- data_list[[i]][,2:17]
b1 <- rep(1, 16)
b1
X.g %*% b1
class(X.g)
class(Y.g)
X.g <- data_list[[i]][ ,2:17] %>% as.matrix()
X.g
X.g %*% b1
W.g <- network_lsit[[i]]
W.g
W.g <- network_lsit[[i]] %>% as.matrix()
W.g
l.g <- rep(1, nrow(network_lsit[[i]]))
l.g
a.g * l.g
a.g <- 5
a.g * l.g
e.g
e.gT_e.g <- t(e.g) %*% e.g
e.gT_e.g
inprodterm <- 0
for (i in 1:76){
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- data_list[[i]][ ,2:17] %>% as.matrix()
W.g <- network_lsit[[i]] %>% as.matrix()
b1 <- rep(1, 16)
b2 <- rep(2,16)
l.g <- rep(1, nrow(network_lsit[[i]]))
a.g <- 5
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g * l.g
e.gT_e.g <- t(e.g) %*% e.g
inprodterm <- inprodterm + e.gT_e.g
}
inprodterm <- inprodterm + e.gT_e.g
}
inprodterm
inprodterm <- (2*sigma2)^-1 * inprodterm
sigma2 = 1
inprodterm <- (2*sigma2)^-1 * inprodterm
inprodterm
b <- c(rep(1,16), rep(2,16))
log_likeli <- function(lambda, b, sigma2){
k <- length(b) / 2
b1 <- b[1:k]
b2 <- b[(k + 1):(2 * k)]
sigma2term <- - log(sigma2) * nrow(combined_data)/2 # OK
logdetterm <-  sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
})) # OK
inprodterm <- sum(sapply(1:76, function(i) {
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- as.matrix(data_list[[i]][ ,2:17])
W.g <- as.matrix(network_lsit[[i]])
l.g <- rep(1, nrow(network_lsit[[i]]))
a.g <- 5
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g * l.g
e.gT_e.g <- t(e.g) %*% e.g
return(e.gT_e.g)
}))
inprodterm <- -(2 * sigma2)^-1 * inprodterm
likelihood <- sigma2term + logdetterm + inprodterm
return(likelihood)
}
log_lokeli(lambda, b, sigma2)
View(log_likeli)
log_likeli(lambda, b, sigma2)
a.g <- rnorm(76)
inprodterm <- sum(sapply(1:76, function(i) {
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- as.matrix(data_list[[i]][ ,2:17])
W.g <- as.matrix(network_lsit[[i]])
l.g <- rep(1, nrow(network_lsit[[i]]))
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g[i] * l.g
e.gT_e.g <- t(e.g) %*% e.g
return(e.gT_e.g)
}))
e.gT_e.g
inprodterm
inprodterm <- -(2 * sigma2)^-1 * inprodterm
inprodterm
log_likeli <- function(lambda, b, sigma2){
k <- length(b) / 2
b1 <- b[1:k]
b2 <- b[(k + 1):(2 * k)]
sigma2term <- - log(sigma2) * nrow(combined_data)/2 # OK
logdetterm <-  sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
})) # OK
a.g <- rnorm(76)
inprodterm <- sum(sapply(1:76, function(i) {
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- as.matrix(data_list[[i]][ ,2:17])
W.g <- as.matrix(network_lsit[[i]])
l.g <- rep(1, nrow(network_lsit[[i]]))
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g[i] * l.g
e.gT_e.g <- t(e.g) %*% e.g
return(e.gT_e.g)
}))
inprodterm <- -(2 * sigma2)^-1 * inprodterm
likelihood <- sigma2term + logdetterm + inprodterm
return(likelihood)
}
log_likeli(lambda, b, sigma2)
init.lambda <- 1/10
init.a.g <- rnorm(76)
init.b <- c(rep(1, 17), rep(0.5, 17))
init.sigma2 <- 2
init.param <- c(init.lambda, init.a.g, init.b, init.sigma2)
1:2
76-2+1
78+17
95-78
94-78
95+15
110-95
length(95:111)
length(78:94)
log_likeli <- function(param){
lambda <- param[1]
a.g <- param[2:77]
b1 <- param[78:94]
b2 <- param[95:111]
su <- param[112]
sigma2term <- - log(sigma2) * nrow(combined_data)/2 # OK
logdetterm <-  sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
})) # OK
inprodterm <- sum(sapply(1:76, function(i) {
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- as.matrix(data_list[[i]][ ,2:17])
W.g <- as.matrix(network_lsit[[i]])
l.g <- rep(1, nrow(network_lsit[[i]]))
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g[i] * l.g
e.gT_e.g <- t(e.g) %*% e.g
return(e.gT_e.g)
}))
inprodterm <- -(2 * sigma2)^-1 * inprodterm
likelihood <- sigma2term + logdetterm + inprodterm
return(likelihood)
}
init.lambda <- 1/10
init.a.g <- rnorm(76)
init.b <- c(rep(1, 17), rep(0.5, 17))
init.sigma2 <- 2
init.param <- c(init.lambda, init.a.g, init.b, init.sigma2)
log_likeli(init.param)
b1
X.g <- as.matrix(data_list[[2]][ ,2:17])
X.g
17-2+1
colnames(combined_data)
View(data_list)
View(e.g)
# 建立一個空的list，用於存放所有的變數
data_list <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("./problem_set_3_sample/group/group", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
data_list[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(data_list) <- paste0("g", 1:76)
# 可以透過data_list$g1, data_list$g2, ..., data_list$g76來存取相應的變數
# 建立一個空的list，用於存放所有的變數
network_lsit <- list()
# 使用循環來讀入檔案並儲存到list中
for (i in 1:76) {
filename <- paste0("./problem_set_3_sample/network/network", i, ".dat")
data <- read.table(filename)  # 使用適當的讀取函數，如read.table()
network_lsit[[i]] <- data
}
# 將list中的變數名稱設定為"g1", "g2", ..., "g76"
names(network_lsit) <- paste0("W", 1:76)
View(data_list)
data_list[["g1"]]
log_likeli <- function(param){
lambda <- param[1]
a.g <- param[2:77]
b1 <- param[78:94]
b2 <- param[95:111]
su <- param[112]
sigma2term <- - log(sigma2) * nrow(combined_data)/2 # OK
logdetterm <-  sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
})) # OK
inprodterm <- sum(sapply(1:76, function(i) {
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- as.matrix(data_list[[i]][ , 1:17])
W.g <- as.matrix(network_lsit[[i]])
l.g <- rep(1, nrow(network_lsit[[i]]))
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g[i] * l.g
e.gT_e.g <- t(e.g) %*% e.g
return(e.gT_e.g)
}))
inprodterm <- -(2 * sigma2)^-1 * inprodterm
likelihood <- sigma2term + logdetterm + inprodterm
return(likelihood)
}
log_likeli(init.param)
log_likeli <- function(param){
lambda <- param[1]
a.g <- param[2:77]
b1 <- param[78:94]
b2 <- param[95:111]
su <- param[112]
sigma2term <- - log(sigma2) * nrow(combined_data)/2 # OK
logdetterm <-  sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
})) # OK
inprodterm <- sum(sapply(1:76, function(i) {
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- as.matrix(data_list[[i]][ , 1:17])
W.g <- as.matrix(network_lsit[[i]])
l.g <- rep(1, nrow(network_lsit[[i]]))
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g[i] * l.g
e.gT_e.g <- t(e.g) %*% e.g
return(e.gT_e.g)
}))
inprodterm <- -(2 * sigma2)^-1 * inprodterm
likelihood <- sigma2term + logdetterm + inprodterm
return(likelihood)
}
log_likeli(init.param)
result <- optim(init.param, log_likeli)
result
log_likeli <- function(param){
lambda <- param[1]
a.g <- param[2:77]
b1 <- param[78:94]
b2 <- param[95:111]
su <- param[112]
sigma2term <- - log(sigma2) * nrow(combined_data)/2 # OK
logdetterm <-  sum(sapply(1:76, function(i) {
logdetterm <- log(det(diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])))
return(logdetterm)
})) # OK
inprodterm <- sum(sapply(1:76, function(i) {
S.g <- diag(nrow(network_lsit[[i]])) - lambda * as.matrix(network_lsit[[i]])
Y.g <- data_list[[i]][ ,18]
X.g <- as.matrix(data_list[[i]][ , 1:17])
W.g <- as.matrix(network_lsit[[i]])
l.g <- rep(1, nrow(network_lsit[[i]]))
e.g <- S.g %*% Y.g - X.g %*% b1 - W.g %*% X.g %*% b2 - a.g[i] * l.g
e.gT_e.g <- t(e.g) %*% e.g
return(e.gT_e.g)
}))
inprodterm <- -(2 * sigma2)^-1 * inprodterm
likelihood <- sigma2term + logdetterm + inprodterm
return(- likelihood)
}
bounds <- function(x) {
# Set the lower and upper bounds for the specific parameter
x[1] <- pmin(pmax(x[1], lower_bound), upper_bound)
return(x)
}
result <-  optim(par = initial_values, fn = objective, method = "L-BFGS-B", lower = rep(-Inf, 112), upper = rep(Inf, 112), control = list(bounds = bounds))
result <-  optim(par = init.param, fn = log_likeli, method = "L-BFGS-B", lower = rep(-Inf, 112), upper = rep(Inf, 112), control = list(bounds = bounds))
bounds <- function(x) {
# Set the lower and upper bounds for the specific parameter
x[1] <- pmin(pmax(x[1], -0.1), 0.1)
return(x)
}
result <-  optim(par = init.param, fn = log_likeli, method = "L-BFGS-B", lower = rep(-Inf, 112), upper = rep(Inf, 112), control = list(bounds = bounds))
result <-  optim(par = init.param, fn = log_likeli, method = "L-BFGS-B", lower = c(-0.1, rep(-Inf, 111)), upper = c(0.1, rep(Inf, 111)))
result
init.lambda <- 1/10
init.a.g <- rnorm(76)
init.b <- c(rep(1, 17), rep(0.5, 17))
init.sigma2 <- 2
# init.param <- c(init.lambda, init.a.g, init.b, init.sigma2)
init.param <- rep(0, 112)
result <-  optim(par = init.param, fn = log_likeli, method = "L-BFGS-B", lower = c(-0.1, rep(-Inf, 111)), upper = c(0.1, rep(Inf, 111)))
112
112
result
