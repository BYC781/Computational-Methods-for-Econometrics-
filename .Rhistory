E_v3Z  = v[,3] * cbind( dat2[,9],Z3)
E_v4Z  = v[,4] * cbind( dat2[,9],Z4)
E_v5Z  = v[,5] * cbind( dat2[,9],Z5)
E_v6Z  = v[,6] * cbind( dat2[,9],Z6)
v_i_hat <- cbind(E_v0X, E_v1Z, E_v2Z, E_v3Z, E_v4Z, E_v5Z, E_v6Z)
g_n <- colMeans(v_i_hat)
return(g_n)
}
obj.fn <- function(para){
A <- para[1:2] %>% as.matrix()
B <- para[3:5] %>% as.matrix()
d <- para[6]
rho <- para[7]
n_hat <- get.n_hat(A,B,d,rho)
v <- pred.error(n_hat)
g_n <- g_n.fn(v)
mom <- t(g_n) %*% g_n
return(mom)
}
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
library(tidyverse)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
T <- 10
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
library(tidyverse)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
T <- 10
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
XX[mkt.i, ]
mkt.i <- 1
XX[mkt.i, ]
B
para <- init.param
B <- para[3:5] %>% as.matrix()
B
XX[mkt.i, ] %*% B
XX[mkt.i, ] %>% as.matrix()
XX[mkt.i, ] %*% B
XX[mkt.i, ] %>% as.numeric()
(XX[mkt.i, ] %>% as.numeric()) %*% B
source("./ps2/ps2_q1_fn.R")
T <- 10
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
source("./ps2/ps2_q1_fn.R")
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
get_XX_and_Z.mat_and_Y()
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
View(msm.fit)
msm.fit[["par"]]
g_n.fn <- function(v){
v <- as.matrix(v)
E_v0X  = v[,7] * XX
E_v1Z  = v[,1] * cbind(XX, Z1)
E_v2Z  = v[,2] * cbind(XX, Z2)
E_v3Z  = v[,3] * cbind(XX, Z3)
E_v4Z  = v[,4] * cbind(XX, Z4)
E_v5Z  = v[,5] * cbind(XX, Z5)
E_v6Z  = v[,6] * cbind(XX, Z6)
v_i_hat <- cbind(E_v0X, E_v1Z, E_v2Z, E_v3Z, E_v4Z, E_v5Z, E_v6Z)
g_n <- colMeans(v_i_hat)
return(g_n)
}
T <- 1
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
library(tidyverse)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
T <- 1
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
kable(msm.fit[["par"]])
library(kableExtra)
library(kable)
kable(msm.fit[["par"]])
msm.fit[["par"]]
install.packages("foreach")
install.packages("doParallel")
library(tidyverse)
library(doParallel)
library(foreach)
source("./ps2/ps2_q1_fn.R")
# 設置使用的核心數量
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# 設置分給每個核心處理的市場數量
chunk_size <- ceiling(n.mkt/4)
# 使用foreach進行平行處理
n_pred_list <- foreach(i = 1:4, .combine = 'rbind') %dopar% {
start <- (i-1)*chunk_size + 1
end <- min(i*chunk_size, n.mkt)
single.sim.process(A, B, d, rho)[start:end, ]
}
library(tidyverse)
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# 設置分給每個核心處理的市場數量
chunk_size <- ceiling(n.mkt/4)
# 使用foreach進行平行處理
n_pred_list <- foreach(i = 1:4, .combine = 'rbind') %dopar% {
start <- (i-1)*chunk_size + 1
end <- min(i*chunk_size, n.mkt)
single.sim.process(A, B, d, rho)[start:end, ]
}
library(tidyverse)
library(doParallel)
library(foreach)
source("./ps2/ps2_q1_fn.R")
# 設置使用的核心數量
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# 設置分給每個核心處理的市場數量
chunk_size <- ceiling(n.mkt/4)
library(tidyverse)
library(doParallel)
library(foreach)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
# 設置使用的核心數量
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# 設置分給每個核心處理的市場數量
chunk_size <- ceiling(n.mkt/4)
# 使用foreach進行平行處理
n_pred_list <- foreach(i = 1:4, .combine = 'rbind') %dopar% {
start <- (i-1)*chunk_size + 1
end <- min(i*chunk_size, n.mkt)
single.sim.process(A, B, d, rho)[start:end, ]
}
library(tidyverse)
library(doParallel)
library(foreach)
library(magrittr)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
# 設置使用的核心數量
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# 設置分給每個核心處理的市場數量
chunk_size <- ceiling(n.mkt/4)
# 使用foreach進行平行處理
n_pred_list <- foreach(i = 1:4, .combine = 'rbind') %dopar% {
start <- (i-1)*chunk_size + 1
end <- min(i*chunk_size, n.mkt)
single.sim.process(A, B, d, rho)[start:end, ]
}
library(magrittr)
# 設置使用的核心數量
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# 設置分給每個核心處理的市場數量
chunk_size <- ceiling(n.mkt/4)
# 使用foreach進行平行處理
n_pred_list <- foreach(i = 1:4, .combine = 'rbind') %dopar% {
start <- (i-1)*chunk_size + 1
end <- min(i*chunk_size, n.mkt)
single.sim.process(A, B, d, rho)[start:end, ]
}
library(tidyverse)
library(doParallel)
library(foreach)
library(magrittr)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
library(parallel)
get.n_hat <- function(A, B, d, rho, T, num_cores = 4) {
container <- matrix(0, nrow = n.mkt, ncol = 7)
market_list <- split(1:n.mkt, 1:n.mkt %/% (n.mkt / num_cores))
result_list <- mclapply(market_list, function(market_indices) {
draw_u()
market_container <- single.sim.process(A, B, d, rho)[market_indices, ]
return(market_container)
}, mc.cores = num_cores)
for (i in 1:length(result_list)) {
container[market_list[[i]], ] <- container[market_list[[i]], ] + result_list[[i]]
}
n_hat <- container / T
return(n_hat)
}
View(get.n_hat)
library(tidyverse)
library(doParallel)
library(foreach)
library(magrittr)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
library(parallel)
get.n_hat_parallel <- function(A, B, d, rho, T, num_cores = 4) {
container <- matrix(0, nrow = n.mkt, ncol = 7)
market_list <- split(1:n.mkt, 1:n.mkt %/% (n.mkt / num_cores))
result_list <- mclapply(market_list, function(market_indices) {
draw_u()
market_container <- single.sim.process(A, B, d, rho)[market_indices, ]
return(market_container)
}, mc.cores = num_cores)
for (i in 1:length(result_list)) {
container[market_list[[i]], ] <- container[market_list[[i]], ] + result_list[[i]]
}
n_hat <- container / T
return(n_hat)
}
# MSM
T <- 1
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
library(tidyverse)
library(doParallel)
library(foreach)
library(magrittr)
source("./ps2/ps2_q1_fn.R")
flight.df <- readxl::read_xlsx("./ps2/CilibertoTamerEconometrica.xlsx")
dat2 <- (flight.df %>%
mutate(N = rowSums(across(airlineAA:airlineWN)), const = 1, .before = marketdistance))
firm.Names <- flight.df %>% select(starts_with("airline")) %>% colnames() %>% substring(8)
market.regressors <- c('const',"marketdistance","marketsize" )
firm.regressors <- c("marketpresence","mindistancefromhub")
market.regressors.i <- c(9, 10, 15)
firm.regressors.i <- c(18, 24)
n.mkt <- nrow(dat2)
firm.n <- length(firm.Names)
length.of.each.param <- c(length(firm.regressors),length(market.regressors),1,1 )
get_XX_and_Z.mat_and_Y()
library(parallel)
get.n_hat_parallel <- function(A, B, d, rho, T, num_cores = 4) {
container <- matrix(0, nrow = n.mkt, ncol = 7)
market_list <- split(1:n.mkt, 1:n.mkt %/% (n.mkt / num_cores))
result_list <- mclapply(market_list, function(market_indices) {
draw_u()
market_container <- single.sim.process(A, B, d, rho)[market_indices, ]
return(market_container)
}, mc.cores = num_cores)
for (i in 1:length(result_list)) {
container[market_list[[i]], ] <- container[market_list[[i]], ] + result_list[[i]]
}
n_hat <- container / T
return(n_hat)
}
# MSM
T <- 1
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
msm.fit <- optim(fn = obj.fn, par = init.param, method = "BFGS")
kable(msm.fit[["par"]])
msm.fit[["par"]]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
like_oprobit<- function(init){
beta.mat <- init[1:3]
delta <- init[4]
f <- 0
for (i in 1:n.mkt){
if (Y[i] == 0){
p = pnorm(-t(XX[i,])%*% beta.mat)
}
else if (Y[i] == 6){
p = 1 - pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]))
}
else{
p = pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]+1)) -
pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]))
}
}
f <- f -log(p)
}
set.seed(1234)
init <- c(1,1,1,1)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
View(like_oprobit)
like_oprobit(init)
like_oprobit<- function(init){
beta.mat <- init[1:3]
delta <- init[4]
f <- 0
for (i in 1:n.mkt){
if (Y[i] == 0){
p = pnorm(-t(XX[i,])%*% beta.mat)
}
else if (Y[i] == 6){
p = 1 - pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]))
}
else{
p = pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]+1)) -
pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]))
}
}
f <- f -log(p)
return(f)
}
like_oprobit(init)
XX[1,]
t(XX[,1])
t(XX[1,])
beta.mat <- init[1:3]
t(XX[1,]) %*% beta.mat
beta.mat
?as.matrix
like_oprobit<- function(init){
beta.mat <- init[1:3] %>% as.matrix(, nrow=1)
delta <- init[4]
f <- 0
for (i in 1:n.mkt){
if (Y[i] == 0){
p = pnorm(-t(XX[i,])%*% beta.mat)
}
else if (Y[i] == 6){
p = 1 - pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]))
}
else{
p = pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]+1)) -
pnorm(-t(XX[i,]) %*% beta.mat + delta*log(Y[i]))
}
}
f <- f -log(p)
return(f)
}
like_oprobit(init)
beta.mat <- init[1:3] %>% as.matrix(, nrow=1)
beta.mat
t(XX[i,])%*% beta.mat
t(XX[1,])%*% beta.mat
t(XX[i,])
t(XX[1,])
like_oprobit<- function(init){
beta.mat <- init[1:3] %>% as.matrix(, ncol=1)
delta <- init[4]
f <- 0
for (i in 1:n.mkt){
if (Y[i] == 0){
p = pnorm(-XX[i,]%*% beta.mat)
}
else if (Y[i] == 6){
p = 1 - pnorm(-XX[i,] %*% beta.mat + delta*log(Y[i]))
}
else{
p = pnorm(-XX[i,] %*% beta.mat + delta*log(Y[i]+1)) -
pnorm(-XX[i,] %*% beta.mat + delta*log(Y[i]))
}
}
f <- f -log(p)
return(f)
}
set.seed(1234)
init <- c(1,1,1,1)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
like_oprobit<- function(init){
beta.mat <- init[1:3] %>% as.matrix(, ncol=1)
delta <- init[4]
f <- 0
for (i in 1:n.mkt){
if (Y[i] == 0){
p = pnorm((-XX[i,] %>% as.matrix)%*% beta.mat)
}
else if (Y[i] == 6){
p = 1 - pnorm((-XX[i,] %>% as.matrix) %*% beta.mat + delta*log(Y[i]))
}
else{
p = pnorm((-XX[i,] %>% as.matrix) %*% beta.mat + delta*log(Y[i]+1)) -
pnorm((-XX[i,] %>% as.matrix) %*% beta.mat + delta*log(Y[i]))
}
}
f <- f -log(p)
return(f)
}
set.seed(1234)
init <- c(1,1,1,1)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
like_oprobit<- function(init){
XX <- XX %>% as.matrix()
beta.mat <- init[1:3] %>% as.matrix(, ncol=1)
delta <- init[4]
f <- 0
for (i in 1:n.mkt){
if (Y[i] == 0){
p = pnorm(-XX[i,]%*% beta.mat)
}
else if (Y[i] == 6){
p = 1 - pnorm(-XX[i,] %*% beta.mat + delta*log(Y[i]))
}
else{
p = pnorm(-XX[i,] %*% beta.mat + delta*log(Y[i]+1)) -
pnorm(-XX[i,] %*% beta.mat + delta*log(Y[i]))
}
}
f <- f -log(p)
return(f)
}
set.seed(1234)
init <- c(1,1,1,1)
fit <- optim(fn = like_oprobit, par = init, method = "BFGS")
par_df <- data.frame(value = fit[["par"]])
rownames(par_df) <- c("b0", "b1", "b2", "d")
kable(par_df)
View(Z1)
T <- 10
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
A <- init.param[1:2] %>% as.matrix()
B <- init.param[3:5] %>% as.matrix()
d <- init.param[6]
rho <- init.param[7]
n_hat <- get.n_hat(A,B,d,rho)
n_hat
v <- pred.error(n_hat)
v
g_n <- g_n.fn(v)
mom <- t(g_n) %*% g_n
mom
g_n
mom
n_hat
T <- 100
set.seed(2048)
init.param = c(0.5, 0.5, 0.9, 0.1, 0.5, 1.9, 0.6)
A <- init.param[1:2] %>% as.matrix()
B <- init.param[3:5] %>% as.matrix()
d <- init.param[6]
rho <- init.param[7]
n_hat <- get.n_hat(A,B,d,rho)
n_hat
v <- pred.error(n_hat)
g_n <- g_n.fn(v)
mom <- t(g_n) %*% g_n
mom
